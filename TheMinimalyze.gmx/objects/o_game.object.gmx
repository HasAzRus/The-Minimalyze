<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
//globalvar grid;

surf = surface_create(800, 800);
application_surface_draw_enable (false);

global.game_over = false;
global.time = 1;
global.game_type = -1;// 0 значит линейный уровень, 1 - режим выживание, 2 - обучение, 3 - rogualike

paused = false;

player_money = 0;

rooms = 0;

global.sun_angle = irandom(360);
//global.difficulty = 0; //easy, normal, medium, hard, very hard

weapon_ui[1] = spr_pistol_pickup;
weapon_ui[2] = spr_gun_pickup;
weapon_ui[3] = spr_uzi_pickup;
weapon_ui[4] = spr_ak47_pickup;
weapon_ui[5] = spr_chainsaw_pickup;
weapon_ui[6] = spr_machinegun_pickup;
weapon_ui[7] = spr_mp5_pickup;
weapon_ui[8] = spr_flamethrower_pickup;

a = 0;
up = true;
down = false;

show_hp = true;

can_skip_training = false;
//cell_width = 8;
//cell_height = 8;

//hcells = room_width div cell_width;
//vcells = room_height div cell_height;

//grid = mp_grid_create(0, 0, hcells, vcells, cell_width, cell_height);
//mp_grid_add_instances(global.grid, o_solid, false);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[2]
box = instance_create(irandom_range(1, room_width - 1), -16, o_ammo_box_fall);
alarm[2] = room_speed * 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[1]
if(instance_number(o_zombies) &lt;= 10)
{
    repeat(4)
    {
        //global.scores += 10;
        zombie = instance_create(irandom_range(1, room_width - 1), irandom_range(1, room_height - 1), o_zombie_start_point);
    }
    alarm[1] = room_speed * 4;
}
else alarm[1] = room_speed * 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over and game_end
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
player = instance_nearest(x, y, o_player);

key_restart = keyboard_check_pressed(vk_space);
key_escape = keyboard_check_pressed(vk_escape);
key_skip = keyboard_check_pressed(vk_enter);

key_any = keyboard_check_pressed(vk_anykey) || mouse_check_button_pressed(mb_any);

if player != noone &amp;&amp; !game_over
{
    player_x = player.x;
    player_y = player.y;
    weap_dir = player.weap_dir;
    player_life = player.life;
    player_ammo = player.ammo;
    player_weapon = player.set_weapon
    player_weapon_y = player.weapon_y;
    //player_weapon_ui = player.weapon_ui;
    player_stock_ammo = player.stock_ammo;
    player_throw_weapon = player.throw_weapon;
    player_throw_inst_count = player.throw_inst_count;
    player_burning = player.burning;
    player_burn_time = player.burn_time;
    player_money = global.money;
    player_armor = player.armor;
    player_armor_health = player.armor_health;
    
    if(up &amp;&amp; !down)
    {
        if(a &lt; 1)
        {
            a += 0.05;
            if(a &gt;= 1)
            {
                up = false;
                down = true;
            }  
        }
    }
    
    if(down &amp;&amp; !up)
    {
        if(a &gt; 0)
        {
            a -= 0.05;
            if(a &lt;= 0)
            {
                up = true;
                down = false;
            }
        }
    }
}

//if(!paused) application_surface_draw_enable(false);

if global.game_over 
{
    if(key_any)
    {
        room_goto(r_death_scene)
//        application_surface_draw_enable(true);
    }
}

if key_escape &amp;&amp; !paused
{   
    pause();
}

if(global.game_type == 2 &amp;&amp; can_skip_training &amp;&amp; key_skip)
{
    room_goto(r_menu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PostDraw
shader_set(shd_blackwhite);
shader_reset();

shader_set(shd_stereo3d);
_d = shader_get_uniform(shd_stereo3d, "displacement");
shader_set_uniform_f(_d, 0.001);

surface_set_target(surf);
draw_surface (application_surface, 0, 0);
surface_reset_target();
draw_surface (surf, 0, 0);

shader_reset();

shader_set(shd_stereo3d);
_d1 = shader_get_uniform(shd_stereo3d, "displacement");
shader_set_uniform_f(_d1, -0.001);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_set_font(ru);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

if player != noone
{
    draw_sprite_ext(spr_blood_screen2, player_life/9, view_xview, view_yview, (view_wview/200), (view_hview/200), 0, c_white, a);
    
    draw_set_colour(c_white)
    
    if show_hp
    {
        draw_sprite_ext(spr_health, player_life/2, view_xview + 2, view_yview + 2, 1, 1, 0, c_white, 1);
        draw_text(view_xview + 36, view_yview + 3, string((player_life * 100) div 36) + "%");
    }
    
    if(player_armor != 0)
    {
        draw_sprite_ext(spr_armor_health, player_armor_health/2, view_xview + view_wview - 32, view_yview + 2, 1, 1, 0, c_white, 1);
        draw_set_halign(fa_right);
        draw_text(view_xview + view_wview - 36, view_yview + 3, string((player_armor_health * 100) div 36) + "%")
        draw_sprite_ext(spr_armor_ui, player_armor - 1, view_xview + view_wview - 7, view_yview + 8, 0.8, 0.8, 0, c_white, 1);
    }
    
    if player_weapon != 0
    { 
        draw_sprite(spr_ammo, player_ammo, view_xview + 2, view_yview + 15);
    
        draw_sprite_ext(weapon_ui[player_weapon], 0, view_xview + 8, view_yview + 21, 0.6, 0.6, 45, c_white, 1);
    
        draw_set_colour(c_white);
        draw_set_halign(fa_left);
        draw_text(view_xview + 36, view_yview + 16, "/" + string(player_stock_ammo));
    }
    
    if player_throw_weapon != 0
    {   
        draw_set_halign(fa_left);     
        draw_sprite(spr_bomb_ui, player_throw_weapon - 1, view_xview + 2, view_yview + 28);
        draw_text(view_xview + 16, view_yview + 30, "x" + string(player_throw_inst_count));
    }
    
    //draw_set_colour(c_green);
//    if player_burning 
//    {
//        draw_sprite(spr_space_press_ui, choose(0, 1), view_xview + view_wview/2, view_yview + (view_hview - 32));
//        draw_sprite(spr_burn_progress_bar_ui, player_burn_time / 10, view_xview + view_wview/2, view_yview + (view_hview - 26));        
//    }
    if(global.game_type == 0)
    {
        draw_set_halign(fa_right);
        draw_text(view_xview + 22, view_yview + view_hview - 16, string(player_money) + "$");
        
    }
    else if(global.game_type == 1)
    {
        draw_sprite(spr_score_background, 0, view_xview, view_yview + view_hview - 11)
        draw_set_halign(fa_left);
        draw_set_colour(c_black);
        draw_text(view_xview + 8, view_yview + view_hview - 10, string(global.scores));
    }
    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
